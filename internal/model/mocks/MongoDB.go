// Code generated by MockGen. DO NOT EDIT.
// Source: mongo_db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/Totus-Floreo/asperitas-on-go/internal/model"
	gomock "github.com/golang/mock/gomock"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIMongoDB is a mock of IMongoDB interface.
type MockIMongoDB struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoDBMockRecorder
}

// MockIMongoDBMockRecorder is the mock recorder for MockIMongoDB.
type MockIMongoDBMockRecorder struct {
	mock *MockIMongoDB
}

// NewMockIMongoDB creates a new mock instance.
func NewMockIMongoDB(ctrl *gomock.Controller) *MockIMongoDB {
	mock := &MockIMongoDB{ctrl: ctrl}
	mock.recorder = &MockIMongoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMongoDB) EXPECT() *MockIMongoDBMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockIMongoDB) Collection(arg0 string, arg1 ...*options.CollectionOptions) model.ICollection {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(model.ICollection)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockIMongoDBMockRecorder) Collection(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockIMongoDB)(nil).Collection), varargs...)
}
